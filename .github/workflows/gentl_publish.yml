name: Build and Publish Packages

on:
  push:
    branches:
      - feat_PR-7635

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # os: [debian, alpine]
        arch: [amd64, arm64]
        os: [alpine]
        # arch: [amd64]
    env:
      VERSION_FILE: VERSION
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      - name: Read version and generate full version tag
        id: version
        run: |
          VERSION=$(cat $VERSION_FILE | tr -d [a-zA-Z])
          REF=${GITHUB_REF##*/}
          echo "FULL_VERSION=${VERSION}-${REF}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set target vars
        id: vars
        run: |
          if [[ "${{ matrix.arch }}" == "amd64" ]]; then GOARCH=amd64; else GOARCH=arm64; fi
          echo "GOARCH=$GOARCH" >> $GITHUB_OUTPUT
          echo "BINARY_NAME=rclone" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=rclone_${{ steps.version.outputs.FULL_VERSION }}_${GOARCH}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ steps.vars.outputs.GOARCH }} go build -o ${{ steps.vars.outputs.BINARY_NAME }}
          chmod 755 ${{ steps.vars.outputs.BINARY_NAME }}
          cp ${{ steps.vars.outputs.BINARY_NAME }} ${{ steps.vars.outputs.PACKAGE_NAME }}
        shell: bash

      - name: Package binary
        run: |
          mkdir -p pkg/DEBIAN pkg/usr/bin
          cp ${{ steps.vars.outputs.BINARY_NAME }} pkg/usr/bin/
          echo "Package: ${{ steps.vars.outputs.BINARY_NAME }}
          Version: ${{ steps.version.outputs.FULL_VERSION }}
          Architecture: ${{ matrix.arch }}
          Maintainer: maintainers@gentek.ai
          Description: ${{ steps.vars.outputs.BINARY_NAME }} " > pkg/DEBIAN/control

          if [[ "${{ matrix.os }}" == "debian" ]]; then
            dpkg-deb --build pkg ${{ steps.vars.outputs.PACKAGE_NAME }}.deb
          else
            echo "Not building alpine - the script below is incorrect"
            # mkdir -p pkg-alpine/usr/bin
            # cp ${{ steps.vars.outputs.BINARY_NAME }} pkg-alpine/usr/bin/
            # tar -czf ${{ steps.vars.outputs.PACKAGE_NAME }}.apk -C pkg-alpine .
          fi
        shell: bash

      - name: Upload to Nexus
        run: |
          if [[ "${{ matrix.os }}" == "debian" ]]; then
            # The curl command is not quite right 
            curl -u ${{ secrets.NEXUS_USR }}:${{ secrets.NEXUS_PWD }} \
               -H "Content-Type: multipart/form-data" \
               --data-binary "@${{ steps.vars.outputs.PACKAGE_NAME }}.deb" \
              "${{ vars.NEXUS_APT_REPOSITORY }}/${{ steps.vars.outputs.PACKAGE_NAME }}.deb"
          else
            curl -v -u ${{ secrets.NEXUS_USR }}:${{ secrets.NEXUS_PWD }} \
              --upload-file ${{ steps.vars.outputs.PACKAGE_NAME }} \
              "https://nexus.gentek.ai/apps/nexus/repository/gentl-raw/rclone/${{ steps.vars.outputs.PACKAGE_NAME }}"
            # curl -v -u ${{ secrets.NEXUS_USR }}:${{ secrets.NEXUS_PWD }} \
            #   --upload-file ${{ steps.vars.outputs.PACKAGE_NAME }}.apk \
            #   "https://nexus.gentek.ai/apps/nexus/repository/gentl-raw/rclone/${{ steps.vars.outputs.PACKAGE_NAME }}.apk"
          fi
        shell: bash
